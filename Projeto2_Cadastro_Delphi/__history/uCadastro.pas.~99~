unit uCadastro;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, DBClient, DB, Vcl.Grids,
  Vcl.DBGrids, uDMDataModule;

type
  TfrPessoa = class(TForm)
    lbNome: TLabel;
    lbSexo: TLabel;
    lbCPF: TLabel;
    ckEstrangeiro: TCheckBox;
    edNome: TEdit;
    edCPF: TEdit;
    cbSexo: TComboBox;
    btAdicionar: TButton;
    btPrintTabela: TButton;
    btSalvarDados: TButton;
    DBGrid1: TDBGrid;
    lbAlerta1: TLabel;
    procedure FormShow(Sender: TObject);
    procedure btAdicionarClick(Sender: TObject);
    procedure DBGrid2TitleClick(Column: TColumn);
    procedure edCPFExit(Sender: TObject);
    procedure btPrintTabelaClick(Sender: TObject);
    procedure btSalvarDadosClick(Sender: TObject);
    procedure edCPFKeyPress(Sender: TObject; var Key: Char);

  private
    { Private declarations }
    wCDSCadastro: TClientDataSet;
    wSLSalvarDB: TStringlist;

    function fTextoDB: String;  //Retorna o texto das tabelas
    function fDiretorio: String;// Retorna o diretório
  public
    { Public declarations }
  end;

var
  frPessoa: TfrPessoa;

implementation

{$R *.dfm}

procedure TfrPessoa.btAdicionarClick(Sender: TObject);
begin
  // DataSet Criada na tela
  DataModule1.cdsCadastro2.IndexFieldNames := 'bdCodigo';
  if DataModule1.cdsCadastro2.FindKey([edCPF.Text]) then
    DataModule1.cdsCadastro2.Edit
  else
    DataModule1.cdsCadastro2.Insert;

  // Insere informações nas colunas do dataset criado na tela
  DataModule1.cdsCadastro2bdCodigo.AsInteger := StrToInt(edCPF.Text);
  DataModule1.cdsCadastro2bdNome.AsString := edNome.Text;
  DataModule1.cdsCadastro2bdSexo.AsInteger := cbSexo.ItemIndex;
  DataModule1.cdsCadastro2bdEstrangeiro.AsBoolean := ckEstrangeiro.Checked;

  DataModule1.cdsCadastro2.Post;

  edCPF.SetFocus;
end;

procedure TfrPessoa.btPrintTabelaClick(Sender: TObject);
begin
  ShowMessage(fTextoDB);
end;

procedure TfrPessoa.btSalvarDadosClick(Sender: TObject);
begin
  wSLSalvarDB.Add(fTextoDB + #13);  //Adiciona texto da DB para a lista

  if not FileExists(fDiretorio) then  // Verifica se diretorio existe
    ForceDirectories(fDiretorio); // "se" não existir, cria o diretorio

  wSLSalvarDB.SaveToFile(fDiretorio + '\DBCadastro.txt'); // Salva em txt no diretorio
end;

procedure TfrPessoa.DBGrid2TitleClick(Column: TColumn); // Clique na coluna
begin
  if Column.FieldName = 'bdCodigo' then
    DataModule1.cdsCadastro2.IndexFieldNames := 'bdCodigo'; // ordena por ordem numerica do id
  if Column.FieldName = 'bdNome' then
    DataModule1.cdsCadastro2.IndexFieldNames := 'bdNome'; // ordena por ordem alfabetica dos nomess
end;

procedure TfrPessoa.edCPFExit(Sender: TObject);
begin

  DataModule1.cdsCadastro2.IndexFieldNames := 'bdCodigo';
  if DataModule1.cdsCadastro2.FindKey([edCPF.Text]) then  // verifica se tem algun "Codigo" com mesmo nome
  begin
    edNome.Text           := DataModule1.cdsCadastro2bdNome.AsString;
    cbSexo.ItemIndex      := DataModule1.cdsCadastro2bdSexo.AsInteger;
    ckEstrangeiro.Checked := DataModule1.cdsCadastro2bdEstrangeiro.AsBoolean;
  end
  else // Se não tiver, limpa os campus
  begin
    edNome.Text           := '';
    cbSexo.ItemIndex      := -1;
    ckEstrangeiro.Checked := false;
  end;

  if edNome.Text = '' then
    lbAlerta1.Visible := true;
end;

procedure TfrPessoa.edCPFKeyPress(Sender: TObject; var Key: Char);
begin
  if ((key in ['0'..'9'] = false) and (word(key) <> vk_back)) then
  key := #0;
end;

function TfrPessoa.fDiretorio: String;
begin
  Result := 'C:\Users\prog30\Documents\txt_para_prog';
end;

procedure TfrPessoa.FormShow(Sender: TObject);
begin
  wSLSalvarDB := TStringList.Create;
end;

function TfrPessoa.fTextoDB: String;
begin
  Result := '';
  DataModule1.cdsCadastro2.IndexFieldNames := 'bdCodigo';

  DataModule1.cdsCadastro2.First;
  while not DataModule1.cdsCadastro2.Eof do
  begin
    Result := Result + 'Codigo: ' + IntToStr(DataModule1.cdsCadastro2bdCodigo.AsInteger) +
      ' | Nome: ' + DataModule1.cdsCadastro2bdNome.AsString + #13;
    DataModule1.cdsCadastro2.Next;
  end;
end;

end.
